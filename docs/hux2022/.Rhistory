for (x in pos:length(d9)){
# print (x)
#print(d6[x])
for (l in pos:length(d8)){
# print(l)
ifelse (d9[x]==d8[l],posd9[x]<-posd9[x]+1,posd9[x])
}
}
print (d8)
print (d9)
print(posd9-posd8)
d10<-posd9-posd8
#(3^3-3)+6*(1^3-1)+2*(4^3-4)+(5^3-5)+(6^3-6)+(2^3-2)
#for(l in 1:length(d10)){
#tie<-(d10[l]*(d9[l]^3-d9[l]))
#}
tie<-(d10*(d9^3-d9))
print (tie)
print(sum(tie)) ####YES!
}
source("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022/eval_hux2022_12067.R", echo=TRUE)
#srvr<-"https://www.soscisurvey.de/hux2022/?act=fKtaZ3c23D7eVyfBFrzzGT08&rScript"
#srvd<-"https://www.soscisurvey.de/hux2022/?act=4eqU86Oc62EfGZm7PbHOjcmL"
#srvd2<-"https://www.soscisurvey.de/hux2022/?act=4eqU86Oc62EfGZm7PbHOjcmL"
#srvx<-"https://www.soscisurvey.de/hux2022/?act=XFHFbeVybOP6o72MZIy0lUlR"
#pre<-eval(parse("https://www.soscisurvey.de/hux2022/?act=qM85F9YYrhjRhLB3gvub2AyF&rScript"))
###########THISSSSS###########
#insert data + script link
srvd3<-"https://www.soscisurvey.de/hux2022/?act=EpHVi8ffiKSbizRseExLpsec&rScript"
eval(parse(srvd3, encoding="UTF-8"))
#########################################################
a1<-1
a2<-2
a3<-3
a4<-4
a5<-5
a6<-6
a7<-7
######
#obs(ds)
obs<- nrow(ds)
item_names<-names(ds[20:44])
lq<-length(item_names)
acp<-cbind(1:lq,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE)
#todo
#arary obs over options
#u test arrays / observation
tn_array_count<-obs*6
tna<-tn_array_count
tncptr<-matrix(1:tn_array_count,6)
tncpt_obs<-matrix(1:tna,obs)*0
tncpt_obs_sk<-matrix(1:tna,obs)*0
tncpt_sk2<-matrix(1:tna,obs)*0
tncptr<-tncptr*0
tncpt<-tncptr
tncpt_sk<-tncpt
qcount<-lq
acp2<-cbind(1:obs,1:qcount,1:qcount)
acp2<-acp2*0
#start looping
for (tn in 1:obs){
# matrix 6 options over 26 questions
acp<-cbind(1:qcount,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE)
# hier skalierte werte eintrage
for(k in 1:qcount){
print(op<-  as.integer(ds[[item_names[k]]]))
#   ifelse(op[1]==1,ct1<-ct1+1,ifelse(op[2]==1,ct1<-ct1+1,"no"))
# opv<-tabulate(as.integer(ds[[item_names[k]]]),6)
op2<-as.integer(ds[[item_names[1][1]]][2])
# print(op<-  as.integer(ds[[item_names[lq]]]))
#
#   ifelse(op2)
#acp[op2,k+26]<-TRUE
#27=
#7=1
#1=7
f<-k
#    k1<-k+26
#k2<-
# tn<-1
#get array position
#  o1<-5
o1<-op[tn] # option per tn
o3<-o1*qcount+f
print(o3)
3*26
# o3<-f*o2+f*26-f
#put true array position
acp[o3]<-TRUE
#########
#nochmal skaliert
# otn<-1
#array position
#f<-26
#tn<-3
#o4<-5
o4<-op[tn]
o5<-tn*qcount-qcount+f
#put scaled value
opox<-ifelse(o4==1,2,ifelse(o4==2,3,ifelse(o4==3,5,ifelse(o4==4,5,ifelse(o4==5,1,ifelse(o4==6,1,0))))))
acp2[o5]<-opox
} # end question loop
print ("ACP")
print(acp)
# rows observations
tncpt_obs[tn,1]<-sum(  print(acp[1:lq,2]))
tncpt_obs[tn,2]<-sum(  print(acp[1:lq,3]))
tncpt_obs[tn,3]<-sum(  print(acp[1:lq,4]))
tncpt_obs[tn,4]<-sum(  print(acp[1:lq,5]))
tncpt_obs[tn,5]<-sum(  print(acp[1:lq,6]))
tncpt_obs[tn,6]<-sum(  print(acp[1:lq,7]))
# colums observations
tncpt[1,tn]<-sum(  print(acp[1:lq,2]))
tncpt[2,tn]<-sum(  print(acp[1:lq,3]))
tncpt[3,tn]<-sum(  print(acp[1:lq,4]))
tncpt[4,tn]<-sum(  print(acp[1:lq,5]))
tncpt[5,tn]<-sum(  print(acp[1:lq,6]))
tncpt[6,tn]<-sum(  print(acp[1:lq,7]))
# skaliertes array
tncpt_sk[1,tn]<-sum(  print(acp[1:lq,2]*2))
tncpt_sk[2,tn]<-sum(  print(acp[1:lq,3]*3))
tncpt_sk[3,tn]<-sum(  print(acp[1:lq,4]*5))
tncpt_sk[4,tn]<-sum(  print(acp[1:lq,5]*5))
tncpt_sk[5,tn]<-sum(  print(acp[1:lq,6]*1))
tncpt_sk[6,tn]<-sum(  print(acp[1:lq,7]*1))
# with values according to option
# tncpt_sk2[1,tn]<-sum(  print(acp2[1:lq,2]))
# tncpt_sk2[2,tn]<-sum(  print(acp2[1:lq,3]))
# tncpt_sk2[3,tn]<-sum(  print(acp2[1:lq,4]))
# tncpt_sk2[4,tn]<-sum(  print(acp2[1:lq,5]))
# tncpt_sk2[5,tn]<-sum(  print(acp2[1:lq,6]))
# tncpt_sk2[6,tn]<-sum(  print(acp2[1:lq,7]))
#
tncpt_obs_sk[tn,1]<-sum(  print(acp[1:lq,2]*2))
tncpt_obs_sk[tn,2]<-sum(  print(acp[1:lq,3]*3))
tncpt_obs_sk[tn,3]<-sum(  print(acp[1:lq,4]*5))
tncpt_obs_sk[tn,4]<-sum(  print(acp[1:lq,5]*5))
tncpt_obs_sk[tn,5]<-sum(  print(acp[1:lq,6]*1))
tncpt_obs_sk[tn,6]<-sum(  print(acp[1:lq,7]*1))
#########
##
tnop_array<-function(tn,acp){
tnopsum1<-sum((acp[1:lq,2]))
tnopsum2<-sum((acp[1:lq,3]))
tnopsum3<-sum((acp[1:lq,4]))
tnopsum4<-sum((acp[1:lq,5]))
tnopsum5<-sum((acp[1:lq,6]))
tnopsum6<-sum((acp[1:lq,7]))
return (c(tnopsum1,tnopsum2,tnopsum3,tnopsum4,tnopsum5,tnopsum6))
}
}
#### tnarrayr for u test
#rows pure
tn1op<-tncpt[1:6]
tn2op<-tncpt[7:12]
tn3op<-tncpt[13:18]
#rows skaliert
tn1op_sk<-tncpt_sk[1:6]
tn2op_sk<-tncpt_sk[7:12]
tn3op_sk<-tncpt_sk[13:18]
tn1op_sk2<-acp2[1:26]
tn2op_sk2<-acp2[27:54]
tn3op_sk2<-acp2[55:78]
#print(tncpt[1:6])
chisq.test(tn2op,tn3op)
wilcox.test(tn2op,tn3op)
chisq.test(tn2op_sk,tn3op_sk)
wilcox.test(tn2op_sk,tn3op_sk)
chisq.test(tn2op_sk2,tn3op_sk2)
wilcox.test(tn2op_sk2,tn3op_sk2)
linetest<- function(tncpt){
library(lme4)
library(lmerTest)
25*3*6 # q*obs*opt
#array per variable
#variables: question*opt
25*6 #150 each obs
#alle acp2 in einer variable
vartn1<-acp2[1:25]
vartn2<-acp2[26:50]
vartn3<-acp2[51:75]
varcpt<<-c(vartn1,vartn2,vartn3) #75
acptable<-as.table(acp2)
outtemp<-tempfile("outdta.csv")
write.csv(acp2,outtemp)
inputdata<-read.csv(outtemp)
#c(inputdata$)
vartbl<-cbind(varcpt)
vartn1_1<-vartn1*0+1
vartn1_2<-vartn1*0+2
vartn1_3<-vartn1*0+3
varcpt_gr<-c(vartn1_1,vartn1_2,vartn1_3)
varcpt_gr
varq1<-1:25
varq2<-26:50
varq3<-51:75
varqx<-c(varq1,varq1,varq1)
#bind table of 75 options chosen + groups(tn 1-3
acp3<-cbind("quest"=varqx,"opt"=varcpt,"tn"=varcpt_gr)
outtemp<-tempfile("outdta.csv")
write.csv(acp3,outtemp)
acp4<-read.csv(outtemp)
#  print(acp4$quest)
# rm(inputdata)
lme1_form<-(acp4$opt~acp4$quest+(1|acp4$tn))
lme1<-(acp4$opt~acp4$quest+(1|acp4$tn)+(1+acp4$quest:acp4$tn))
lme2<-(ds$F401)
testlme<- lmer(lme1)
summary(testlme)
}
d1<-tn1op
d2<-tn2op
d3<-tn3op
d1<-
chisq.test(d1,d2)
wilcox.test(d1,d2,correct = FALSE)
d3<-c(d1,d2)
d5<-rank(d3)
d4<-cbind(d5,d3)
d6<-sum(d5[1:(length(d5)/2)])
#p.175 R1, R2
r1<-d6
d7pos<-length(d5)/2+1
d7<-sum(d5[d7pos:length(d5)])
r2<-d7
d3<-c(d1,d2)
d5<-rank(d3)
d1<-tn1op
d2<-tn2op
d3<-c(d1,d2)
d5<-rank(d3)
d4<-cbind(d5,d3)
d6<-sum(d5[1:(length(d5)/2)])
#p.175 R1, R2
r1<-d6
d7pos<-length(d5)/2+1
d7<-sum(d5[d7pos:length(d5)])
r2<-d7
#choose SET hux2022
a1<-d1<-tn1op
a2<-d2<-tn2op
r1<-d6
r2<-d7
#################
n1<-length(a1)
n2<-n1+1
u1<-r1-((n1*n2)/2)
u2<-r2-((n1*n2)/2)
#should be 0
uproof<-(u1+u2)-(n1*n1)
Ucpt<-c(u1,u2)
usort<-sort(Ucpt)
umin<-usort[1]
print("(3) U-test according to set")
print("stichproben:")
print(a1)
print (a2)
print(z1o<-(umin-((n1*n1))/2))
print(z1u<-sqrt(((n1*n1)*(n1+n1+1))/12))
print(z1<-z1o/z1u)
###########
#12045.
#p.175
z2u<-(umin-(n1*n2/2))/(sqrt(n1*n2*(n1+n2+1)/12))
print(d5)
#verbundene rangplÃ¤tze finden
########################################
#this counting vorkommen of rank /// WORKS
d5<-d3
d6<-unique(d5)
posd6<-d6
posd7<-d6
x<-1
pos<-1
for (x in pos:length(d6)){
# print (x)
#print(d6[x])
for (l in pos:length(d5)){
# print(l)
ifelse (d6[x]==d5[l],posd6[x]<-posd6[x]+1,posd6[x])
}
}
print (d6)
print (d3)
print(posd6-posd7)
d8<-posd6-posd7
#####
d9<-unique(d8)
posd8<-d8
posd9<-d8
x<-1
pos<-1
for (x in pos:length(d9)){
# print (x)
#print(d6[x])
for (l in pos:length(d8)){
# print(l)
ifelse (d9[x]==d8[l],posd9[x]<-posd9[x]+1,posd9[x])
}
}
print (d8)
print (d9)
print(posd9-posd8)
d10<-posd9-posd8
#(3^3-3)+6*(1^3-1)+2*(4^3-4)+(5^3-5)+(6^3-6)+(2^3-2)
#for(l in 1:length(d10)){
#tie<-(d10[l]*(d9[l]^3-d9[l]))
#}
tie<-(d10*(d9^3-d9))
print (tie)
print(sum(tie)) ####YES!
source("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022/eval_hux2022_12067.R", echo=TRUE)
#print(tncpt[1:6])
chisq.test(tn2op,tn3op)
wilcox.test(tn2op,tn3op)
chisq.test(tn2op_sk,tn3op_sk)
wilcox.test(tn2op_sk,tn3op_sk)
chisq.test(tn2op_sk2,tn3op_sk2)
tn1op_sk2<-acp2[1:25]
tn2op_sk2<-acp2[26:54]
tn3op_sk2<-acp2[55:75]
#print(tncpt[1:6])
chisq.test(tn2op,tn3op)
wilcox.test(tn2op,tn3op)
chisq.test(tn2op_sk,tn3op_sk)
wilcox.test(tn2op_sk,tn3op_sk)
chisq.test(tn2op_sk2,tn3op_sk2)
tn1op_sk2<-acp2[1:25]
tn2op_sk2<-acp2[26:50]
tn3op_sk2<-acp2[51:75]
#print(tncpt[1:6])
chisq.test(tn2op,tn3op)
wilcox.test(tn2op,tn3op)
chisq.test(tn2op_sk,tn3op_sk)
wilcox.test(tn2op_sk,tn3op_sk)
chisq.test(tn2op_sk2,tn3op_sk2)
wilcox.test(tn2op_sk2,tn3op_sk2)
linetest<- function(tncpt){
library(lme4)
library(lmerTest)
25*3*6 # q*obs*opt
#array per variable
#variables: question*opt
25*6 #150 each obs
#alle acp2 in einer variable
vartn1<-acp2[1:25]
vartn2<-acp2[26:50]
vartn3<-acp2[51:75]
varcpt<<-c(vartn1,vartn2,vartn3) #75
acptable<-as.table(acp2)
outtemp<-tempfile("outdta.csv")
write.csv(acp2,outtemp)
inputdata<-read.csv(outtemp)
#c(inputdata$)
vartbl<-cbind(varcpt)
vartn1_1<-vartn1*0+1
vartn1_2<-vartn1*0+2
vartn1_3<-vartn1*0+3
varcpt_gr<-c(vartn1_1,vartn1_2,vartn1_3)
varcpt_gr
varq1<-1:25
varq2<-26:50
varq3<-51:75
varqx<-c(varq1,varq1,varq1)
#bind table of 75 options chosen + groups(tn 1-3
acp3<-cbind("quest"=varqx,"opt"=varcpt,"tn"=varcpt_gr)
outtemp<-tempfile("outdta.csv")
write.csv(acp3,outtemp)
acp4<-read.csv(outtemp)
#  print(acp4$quest)
# rm(inputdata)
lme1_form<-(acp4$opt~acp4$quest+(1|acp4$tn))
lme1<-(acp4$opt~acp4$quest+(1|acp4$tn)+(1+acp4$quest:acp4$tn))
lme2<-(ds$F401)
testlme<- lmer(lme1)
summary(testlme)
}
linetest(acp2)
#linetest<- function(tncpt){
library(lme4)
library(lmerTest)
25*3*6 # q*obs*opt
#array per variable
#variables: question*opt
25*6 #150 each obs
#alle acp2 in einer variable
vartn1<-acp2[1:25]
vartn2<-acp2[26:50]
vartn3<-acp2[51:75]
varcpt<<-c(vartn1,vartn2,vartn3) #75
acptable<-as.table(acp2)
outtemp<-tempfile("outdta.csv")
write.csv(acp2,outtemp)
acptable<-as.table(acp2)
varcpt<<-c(vartn1,vartn2,vartn3) #75
#acptable<-as.table(acp2)
#outtemp<-tempfile("outdta.csv")
#write.csv(acp2,outtemp)
#inputdata<-read.csv(outtemp)
#c(inputdata$)
vartbl<-cbind(varcpt)
vartn1_1<-vartn1*0+1
vartn1_2<-vartn1*0+2
vartn1_3<-vartn1*0+3
varcpt_gr<-c(vartn1_1,vartn1_2,vartn1_3)
varcpt_gr
varq1<-1:25
#varq2<-26:50
#varq3<-51:75
varqx<-c(varq1,varq1,varq1)
#bind table of 75 options chosen + groups(tn 1-3
acp3<-cbind("quest"=varqx,"opt"=varcpt,"tn"=varcpt_gr)
outtemp<-tempfile("outdta.csv")
write.csv(acp3,outtemp)
acp4<-read.csv(outtemp)
#  print(acp4$quest)
# rm(inputdata)
lme1_form<-(acp4$opt~acp4$quest+(1|acp4$tn))
lme1<-(acp4$opt~acp4$quest+(1|acp4$tn)+(1+acp4$quest:acp4$tn))
lme2<-(ds$F401)
testlme<- lmer(lme1)
summary(testlme)
source("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022/eval_hux2022_12067.R", echo=TRUE)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",x,x)
source("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022/12065.qscheme_essai_clean.R", echo=TRUE)
#3############################ discomment the following two commands to start refresh
#of items in scheme according to dataset
#replaces all according to itemvorlagen .csv as specified in datenset
replace_loop()
setwd("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022")
#4############################
write_xml(scheme,"qscheme_output.xml")
####
refresh_top(xmltop_scheme)
####
refresh_top(xmltop_scheme,setversion)
View(scheme_top)
View(scheme_top)
print(xml_children(xml_children(scheme_top)))
scheme_top<-init("new",x,xmltop_scheme) #values: old=original scheme, mod=modified scheme
print(xml_children(xml_children(scheme_top)))
####
refresh_top(xmltop_scheme,setversion)
#5#############################
#refresh study top layout according to set
# refresh_top(xmltop_scheme,setversion)
#test for change
# print(xml_children(xml_children(scheme_top)))
write_xml(scheme,"qscheme_surveylayout_top_mod.xml")
#5#############################
#refresh study top layout according to set
# refresh_top(xmltop_scheme,setversion)
#test for change
# print(xml_children(xml_children(scheme_top)))
write_xml(scheme_top,"qscheme_surveylayout_top_mod.xml")
#6.proof: call item/antwort/question in modified scheme
# call: proof([item],[antwortoption 1-6],[questionfield 1-3])
proof(64,1,1)
#3############################ discomment the following commands to start refresh
#of items in scheme according to dataset
#replaces all according to itemvorlagen .csv as specified in datenset
replace_loop()
print(get_question(items,22,1))
#datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR04.csv")
#set dataset version
setversion<-6
#3############################ discomment the following commands to start refresh
#of items in scheme according to dataset
#replaces all according to itemvorlagen .csv as specified in datenset
replace_loop()
print(get_question(items,22,1))
#4############################
#writes new scheme for category fragen into working directory, this scheme has to be
#imported into soscisurvey to actualise category
write_xml(scheme,"qscheme_output.xml")
#5#############################
#refresh study top layout according to set
refresh_top(xmltop_scheme,setversion)
#test for change
# print(xml_children(xml_children(scheme_top)))
#write new layout scheme, this has to be imported into questionaire design
write_xml(scheme_top,"qscheme_surveylayout_top_mod.xml")
scheme_top<-init("new",x,xmltop_scheme) #values: old=original scheme, mod=modified scheme
#test for change
print(xml_children(xml_children(scheme_top)))
#5#############################
#refresh study top layout according to set
refresh_top(xmltop_scheme,setversion)
source("~/boxHKW/21S/essais/gith/12057/essais/docs/hux2022/eval_hux2022_12067.R", echo=TRUE)
View(ds)
#datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR04.csv")
#set dataset version
setversion<-4
setversion_top<-4
#datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR04.csv")
#set dataset version
setversion<-6
#######discomment the following commands to start refresh####################
#of items in scheme according to dataset
#replaces all according to itemvorlagen .csv as specified in datenset
#replace_loop()
#4############################
#writes new scheme for category fragen into working directory, this scheme has to be
#imported into soscisurvey to actualise category
#write_xml(scheme,"qscheme_output.xml")
#5#############################
#refresh study top layout according to set
refresh_top(xmltop_scheme,setversion_top)
